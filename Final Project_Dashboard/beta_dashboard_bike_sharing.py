# -*- coding: utf-8 -*-
"""Fixed-Dashboard_Bike-Sharing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h3u2If-lqEVfalgtc_1e3Si4HAjA8OXy
"""

import pandas as pd
import streamlit as st

main_df = pd.read_csv("all_merged_df.csv")
st.set_option('deprecation.showPyplotGlobalUse', False)

st.header("Bike Sharing Quick Dashboard")

with st.sidebar:
  st.image("https://anivride.com/wp-content/uploads/2022/10/shutterstock_711053371-1.png")

#DAILY ENTRIES
def call_day_sum_yearly(df, selected_year):
  day_main_df = main_df[main_df['Year'] == selected_year]
  day_sum_yearly = day_main_df.groupby(by = "Year").agg({"Total Based on Daily Entries": "sum"})
  total_day_yearly = day_sum_yearly["Total Based on Daily Entries"]
  return total_day_yearly

def day_sum_yearly_full(df, selected_year):
  day_main_df = main_df[main_df['Year'] == selected_year]
  total_day_yearly_full = day_main_df.groupby(by = ["Season", "Weather"]).agg({"Total Based on Daily Entries": "sum"})
  return total_day_yearly_full

def call_day_mean_yearly(df, selected_year):
  day_main_df = main_df[main_df['Year'] == selected_year]
  day_mean_yearly = day_main_df.groupby(by = "Year").agg({"Average Based on Daily Entries": "mean"})
  average_day_yearly = day_mean_yearly["Average Based on Daily Entries"]
  return average_day_yearly

def day_mean_yearly_full(df, selected_year):
  day_main_df = main_df[main_df['Year'] == selected_year]
  average_day_yearly_full = day_main_df.groupby(by = ["Season", "Weather"]).agg({"Average Based on Daily Entries": "mean"})
  return average_day_yearly_full

#HOURLY ENTRIES
def call_hour_sum_yearly(df, selected_year):
  hour_main_df = main_df[main_df['Year'] == selected_year]
  hour_sum_yearly = hour_main_df.groupby(by = "Year").agg({"Total Based on Hourly Entries": "sum"})
  total_hour_yearly = hour_sum_yearly["Total Based on Hourly Entries"]
  return total_hour_yearly

def hour_sum_yearly_full(df, selected_year):
  hour_main_df = main_df[main_df['Year'] == selected_year]
  total_hour_yearly_full = hour_main_df.groupby(by = ["Season", "Weather"]).agg({"Total Based on Hourly Entries": "sum"})
  return total_hour_yearly_full

def call_hour_mean_yearly(df, selected_year):
  hour_main_df = main_df[main_df['Year'] == selected_year]
  hour_mean_yearly = hour_main_df.groupby(by = "Year").agg({"Average Based on Hourly Entries": "mean"})
  average_hour_yearly = hour_mean_yearly["Average Based on Hourly Entries"]
  return average_hour_yearly

def hour_mean_yearly_full(df, selected_year):
  hour_main_df = main_df[main_df['Year'] == selected_year]
  average_hour_yearly_full = hour_main_df.groupby(by = ["Season", "Weather"]).agg({"Average Based on Hourly Entries": "mean"})
  return average_hour_yearly_full

#ALL YEAR
def calling_all_df(df, selected_year):
  all_df = main_df.groupby(by = ["Year", "Season", "Weather"]).agg({
      "Total Based on Daily Entries": "sum",
      "Average Based on Daily Entries": "sum",
      "Total Based on Hourly Entries": "sum",
      "Average Based on Hourly Entries": "sum"
  })
  return all_df


selected_year = st.sidebar.selectbox(
    label = "Which year would you want to see?",
    options = (2011, 2012))

col1, col2 = st.columns(2)

if selected_year:
    #daily entries
    total_day_yearly = call_day_sum_yearly(main_df, selected_year)
    total_day_yearly_full = day_sum_yearly_full(main_df, selected_year)
    average_day_yearly = call_day_mean_yearly(main_df, selected_year)
    average_day_yearly_full = day_mean_yearly_full(main_df, selected_year)
    #hourly entries
    total_hour_yearly = call_hour_sum_yearly(main_df, selected_year)
    total_hour_yearly_full = hour_sum_yearly_full(main_df, selected_year)
    average_hour_yearly = call_hour_mean_yearly(main_df, selected_year)
    average_hour_yearly_full = hour_mean_yearly_full(main_df, selected_year)
    #all year
    all_df = calling_all_df(main_df, selected_year)

    col1.metric("You're Now Seeing The Data from", selected_year, "Based on Daily Entries")
    col2.metric("Total Customers Count This Year:", value = total_day_yearly)
    st.metric("Divided into Season and its weather:", value = "")
    st.dataframe(total_day_yearly_full)

    st.subheader("Average of Customers Divided into Season and its Weather:")
    st.dataframe(average_day_yearly_full)

    st.metric("You're Now Seeing The Data from", selected_year, "Based on Hourly Entries")
    st.dataframe(total_hour_yearly_full)

    st.subheader("Average of Customers Divided into Season and its Weather:")
    st.dataframe(average_hour_yearly_full)

    st.subheader("Here's for Comparison for All Year")
    st.dataframe(all_df)

else:
    st.dataframe(all_df)